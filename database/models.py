# database/models.py
from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, HttpUrl

class Channel(BaseModel):
    id: int = Field(alias="_id") # Telegram channel ID, use as MongoDB _id
    title: str
    username: Optional[str] = None
    link: str # Changed from HttpUrl to str to allow @username as valid
    owner_id: int # Telegram user ID of the owner who added it
    subscribers_count: int
    added_at: datetime = Field(default_factory=datetime.now)
    # Additional fields for statistics/AI analysis could go here
    last_analysis_at: Optional[datetime] = None
    ai_analysis_report: Optional[str] = None # For PRO users

class Order(BaseModel):
    id: str = Field(default_factory=lambda: datetime.now().strftime("%Y%m%d%H%M%S%f") + "__ORDER", alias="_id") # Unique order ID
    user_id: int
    channel_id: int # ID of the target channel
    order_type: str = Field(pattern="^(normal|turbo)$") # 'normal' or 'turbo'
    requested_subscribers: int
    fulfilled_subscribers: int = 0
    errors: int = 0
    status: str = Field(pattern="^(pending|running|completed|cancelled|failed)$")
    created_at: datetime = Field(default_factory=datetime.now)
    updated_at: datetime = Field(default_factory=datetime.now)
    eta: Optional[datetime] = None # Estimated time of arrival
    log: Optional[str] = None # Detailed log of the order process
    cost_credits: int # Actual credits charged for the order

class Transaction(BaseModel):
    id: str = Field(default_factory=lambda: datetime.now().strftime("%Y%m%d%H%M%S%f") + "__TXN", alias="_id") # Unique transaction ID
    user_id: int
    amount_usd: float
    amount_credits: int
    crypto_currency: Optional[str] = None # USDT_TRC20, LTC, SOL, etc.
    cryptomus_uuid: str # Cryptomus invoice UUID
    cryptomus_address: Optional[str] = None # Payment address generated by Cryptomus
    cryptomus_tx_id: Optional[str] = None # Blockchain transaction ID
    status: str = Field(pattern="^(pending|completed|failed|expired)$")
    created_at: datetime = Field(default_factory=datetime.now)
    expires_at: datetime # When Cryptomus invoice expires (e.g., 15 mins)
    processed_at: Optional[datetime] = None

class PromoCode(BaseModel):
    name: str = Field(..., description="Promo code name, e.g., 'START'", alias="_id") # Use name as _id
    credits: int = Field(..., gt=0)
    max_activations: Optional[int] = None # None means unlimited
    activations_used: int = 0
    expires_at: Optional[datetime] = None
    created_at: datetime = Field(default_factory=datetime.now)
    is_active: bool = True
    one_per_ip_serial: bool = False # For START promo: implies broader fraud check

class User(BaseModel):
    id: int = Field(alias="_id") # Telegram user ID, use as MongoDB _id
    username: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    lang_code: Optional[str] = None # ru, en, zh
    registered_at: datetime = Field(default_factory=datetime.now)
    last_activity_at: datetime = Field(default_factory=datetime.now)
    balance: int = 0 # Credits
    is_admin: bool = False
    is_pro: bool = False
    pro_expires_at: Optional[datetime] = None
    channels: List[Channel] = [] # Embedded list of channels
    max_channels_slots: int = 1 # Default max channel slots
    promo_codes_used: List[str] = [] # List of promo code names used by this user
    
    # For multi-account prevention / IP, Serial Number, etc.
    ip_addresses: List[str] = [] # Collects IPs from WebApp interactions
    # "Serial Number" - conceptual for bot, using a WebApp session fingerprint
    session_fingerprints: List[str] = [] # Composite hash from WebApp initData
    warnings: int = 0 # For multi-account attempts
    is_banned: bool = False # Ban status for multi-account or other violations

    # Referral system
    referral_code: str = Field(default_factory=lambda: str(datetime.now().microsecond)) # Unique code for referral link
    referrer_id: Optional[int] = None
    referred_users_count: int = 0 # Count of users who registered via this referral
    referred_users_paid_count: int = 0 # Count of referred users who made a payment
    earned_referral_credits: int = 0

    # History lists
    order_history_ids: List[str] = [] # List of Order._id
    transaction_history_ids: List[str] = [] # List of Transaction._id

class BoosterAccount(BaseModel): # Represents a Telegram account used for boosting
    phone_number: str = Field(alias="_id") # Use phone_number as MongoDB _id
    session_file_path: str # Path to .session file or string base64 of session
    status: str = Field(pattern="^(active|idle|banned|sleeping|offline)$")
    last_activity: datetime = Field(default_factory=datetime.now)
    daily_subs_limit: int = 30 # Default from specs
    current_daily_subs: int = 0
    last_daily_reset: datetime = Field(default_factory=datetime.now)
    proxies: Optional[str] = None # Proxy string if any
    notes: Optional[str] = None